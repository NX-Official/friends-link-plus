{
    "friends": [
        {
            "name": "戴兜",
            "description": "Coding the world.",
            "avatar": "https://avatars.githubusercontent.com/u/18638914?v=4",
            "url": "https://im.daidr.me",
            "rss": "https://daidr.me/feed"
        },
        {
            "name": "Bird",
            "description": "aFlyBird0",
            "avatar": "https://avatars.githubusercontent.com/u/36830265?v=4",
            "url": "https://blog.aflybird.cn/",
            "rss": "https://blog.aflybird.cn/index.xml"
        },
        {
            "name": "NX",
            "description": "这家伙真勤奋，什么都留下了",
            "avatar": "https://nickxu.me/static/favicon.jpg",
            "url": "https://nickxu.me/",
            "rss": "https://nickxu.me/rss2.xml"
        },
        {
            "name": "柏喵Sakura",
            "description": "过气 emo 师傅",
            "avatar": "https://avatars.githubusercontent.com/u/38121125?v=4",
            "url": "https://baimeow.cn/",
            "rss": "https://service-rcg8qv8r-1253828577.sh.apigw.tencentcs.com/release/?url=https://baimeow.cn/index.xml\u0026filter=^(?!.*(?:lives|about|friends)).*$"
        },
        {
            "name": "Marlene",
            "description": "去不了异世界也要拿出真本事~",
            "avatar": "https://avatars.hdu-cs.wiki/MarleneJiang",
            "url": "https://blog.marlene.top/",
            "rss": "https://blog.marlene.top/index.php/feed/rss/category/develop/"
        },
        {
            "name": "ek1ng",
            "description": "Hidden Gem",
            "avatar": "https://avatars.hdu-cs.wiki/ek1ng",
            "url": "https://ek1ng.com/",
            "rss": "https://ek1ng.com/atom.xml"
        },
        {
            "name": "Atom",
            "description": "aka asjdf",
            "avatar": "https://avatars.githubusercontent.com/u/22193008?v=4",
            "url": "https://www.homeboyc.cn/",
            "rss": "https://homeboyc.cn/index.xml"
        },
        {
            "name": "xyxsw",
            "description": "大相的问题",
            "avatar": "https://avatars.hdu-cs.wiki/camera-2018",
            "url": "https://xyxsw.ltd/",
            "rss": "https://xyxsw.ltd/rss.xml"
        },
        {
            "name": "hakuya",
            "description": "恋恋真可爱，嘿嘿嘿。。。🤤🤤🤤。。。",
            "avatar": "https://www.hakuya.work/avatar.png",
            "url": "https://www.hakuya.work",
            "rss": "https://www.hakuya.work/feed"
        }
    ],
    "posts": [
        {
            "Title": "阿里云OSS被刷，我交了1000RMB学费！",
            "Author": "NX",
            "Date": "2023-08-19",
            "Content": "大致经过垂死病中惊坐起😱事情发生在 8 月 8 日凌晨，凌晨三点我突然看见手机上的消息我一开始是疑惑的，我的 OSS 是用来当做图床的，一个月也用不了几个钱账号里记得还有 20 多块钱，怎么会这么快用完然后我进阿里云一看，哇，我被人刷了？最后发现被刷了 3.57 TB，请求了 138 万次哇，我从没想到过这种事情会发生在我的身上而且我停机之后他还一直在刷，根本不带停的（我想，算了，300 块交学费",
            "PostURL": "https://nickxu.me/post/aliyun-oss-brushed-1000rmb-fees.html",
            "AuthorURL": "https://nickxu.me/"
        },
        {
            "Title": "『Golang』并发编程之通道（Channel）",
            "Author": "NX",
            "Date": "2023-08-17",
            "Content": "通道（Channel）通道是什么，为什么使用通道「不要通过共享内存来通信，而应该通过通信来共享内存」通道可以在多个 goroutine 之间传递数据一个通道相当于一个先进先出（FIFO）的队列。也就是说，通道中的各个元素值都是严格地按照发送的顺序排列的，先被发送通道的元素值一定会先被接收。元素值的发送和接收都需要用到操作符 \u003c-。我们也可以叫它接送操作符。一个左尖括号紧接着一个减号形象地代表了元素",
            "PostURL": "https://nickxu.me/post/golang-concurrent-programming-channel.html",
            "AuthorURL": "https://nickxu.me/"
        },
        {
            "Title": "组合为何优于继承",
            "Author": "Atom",
            "Date": "2023-08-17",
            "Content": "# 前言 你可能听过“组合优于继承”这个观点，但是这个说法可能有点笼统，所以我想通过这篇文章详细解释一下：组合和继承分别是什么？为什么前者优于后者？# 继承和组合分别是什么 组合和继承都是为了解决同一个问题——“代码复用”。# 继承是什么 当一个类中有你想要复用的功能时，继承便会发生。我们通常会创建一个子类来扩张基类的功能，然后通过注入新的方法来拓展或重写基类的部件。// 基类 abstra",
            "PostURL": "https://homeboyc.cn/blog/%E7%BB%84%E5%90%88%E4%B8%BA%E4%BD%95%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF/",
            "AuthorURL": "https://www.homeboyc.cn/"
        },
        {
            "Title": "自我觉察与追寻内心宁静的碎碎念",
            "Author": "Bird",
            "Date": "2023-08-16",
            "Content": "很久没有认真地去做一次自我觉察了。本篇文章更多的是我与自己的对话，如果读者也能从中获得一些启发，无论是增添了几分决心、还是悟到了一些觉察、改变的方式，我倍感荣幸。",
            "PostURL": "https://blog.aflybird.cn/2023/08/the-pursuit-of-self-awareness-and-inner-peace/",
            "AuthorURL": "https://blog.aflybird.cn/"
        },
        {
            "Title": "『LeetCode-HOT-100』T41～T50",
            "Author": "NX",
            "Date": "2023-08-13",
            "Content": "二叉树的层序遍历简单的 BFS 练习12345678910111213141516171819202122232425262728293031func levelOrder(root *TreeNode) [][]int {    ans := [][]int{}    if root == nil {        return ans    }    queue := []TreeNode{}",
            "PostURL": "https://nickxu.me/post/leetcode-hot-100-t41-t50.html",
            "AuthorURL": "https://nickxu.me/"
        },
        {
            "Title": "源码分析——Go语言依赖注入库 samber/do",
            "Author": "Bird",
            "Date": "2023-08-05",
            "Content": "琢磨设计模式与抽象，可以说是我的最爱之一了。刚学 Go 的时候，我就陶醉于其的 interface 设计。这次，我们来聊聊 Go 语言的依赖注入（DI）库 samber/do。本文不是一行行分析源码，而是尝试一步步复现作者的设计思路。",
            "PostURL": "https://blog.aflybird.cn/2023/08/read-open-source-go-dependency-injection-library-samber-do/",
            "AuthorURL": "https://blog.aflybird.cn/"
        },
        {
            "Title": "『LeetCode-HOT-100』T31～T40",
            "Author": "NX",
            "Date": "2023-08-05",
            "Content": "颜色分类这真的是 Medium 吗，哈哈哈😂123456789101112131415161718192021222324func sortColors(nums []int) {    var red, white, blue int    for i := 0; i \u003c len(nums); i++ {        switch nums[i] {        case 0:",
            "PostURL": "https://nickxu.me/post/leetcode-hot-100-t31-t40.html",
            "AuthorURL": "https://nickxu.me/"
        },
        {
            "Title": "『LeetCode-HOT-100』T21～T30",
            "Author": "NX",
            "Date": "2023-08-03",
            "Content": "全排列板子题，不解释123456789101112131415161718func permute(nums []int) (ans [][]int) {    var dfs func(begain, end int)    dfs = func(begain, end int) {        if begain == end {            // 切片是引用类型，需要深拷贝一下",
            "PostURL": "https://nickxu.me/post/leetcode-hot-100-t21-t30.html",
            "AuthorURL": "https://nickxu.me/"
        },
        {
            "Title": "『LeetCode-HOT-100』T11～T20",
            "Author": "NX",
            "Date": "2023-07-30",
            "Content": "有效的括号栈的经典题目了属于是12345678910111213141516171819202122232425262728293031323334353637383940func isValid(s string) bool {    stack := \"\"    for k := 0; k \u003c len(s); k++ {        i := s[k]        switch i {",
            "PostURL": "https://nickxu.me/post/leetcode-hot-100-t11-t20.html",
            "AuthorURL": "https://nickxu.me/"
        },
        {
            "Title": "解决 gRPC 中 oneof 类型未导出的问题",
            "Author": "Atom",
            "Date": "2023-07-30",
            "Content": "# 场景 proto 中有个项是 oneof，但是最新的 gRPC generator并没有将此字段的接口导出。Proto:message Setting { string item_id = 1; // 设置项的内部唯一id string item_label = 2; // 设置项的名称 SettingItemType item_type = 3; // 设置项的类型 oneof attr",
            "PostURL": "https://homeboyc.cn/blog/%E8%A7%A3%E5%86%B3-grpc-%E4%B8%AD-oneof-%E7%B1%BB%E5%9E%8B%E6%9C%AA%E5%AF%BC%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/",
            "AuthorURL": "https://www.homeboyc.cn/"
        },
        {
            "Title": "LLM Agent之结构化输出",
            "Author": "Marlene",
            "Date": "2023-07-26",
            "Content": "引言自去年年底以来，GPT的迅速发展诞生了一系列大模型。出现了更新、更大、更强的GPT-4。OpenAI不断推出GPT-4，ChatGPT Plugins，代码解释器，Function calling,图片处理等等。7月的WAIC上，笔者也有幸见到了国内一众企业相继展示自家的大模型。在这段时间里，LLM从最初的PE工程走向智能体交互。而笔者从最开始考虑LLM能不能多人协作，思考”一个专家完成所有任",
            "PostURL": "https://blog.marlene.top/index.php/develop/88.html",
            "AuthorURL": "https://blog.marlene.top/"
        },
        {
            "Title": "Java RMI 攻击梳理总结",
            "Author": "ek1ng",
            "Date": "2023-07-26",
            "Content": "RMI 是什么定义RMI（Remote Method Invocation）是远程方法调用，类似RPC（Remote Procedure Calls）。RPC是打包和传送数据结构，而在Java中，通常传递一个完整的对象，包含数据和操作数据的方法。通过RMI，能够让客户端JVM上的对象，像调用本地对象一样调用服务端JVM上的对象。RMI引入了 Stubs（客户端存根）和 Skeletons（服务端骨",
            "PostURL": "https://www.ek1ng.com/java-rmi.html",
            "AuthorURL": "https://ek1ng.com/"
        },
        {
            "Title": "重学 Java 反射机制",
            "Author": "ek1ng",
            "Date": "2023-07-25",
            "Content": "近期跟一些java的最新漏洞，发现自己的语言基础太差了，跟着p牛的java安全漫谈重新学一下反射，p牛的文章确实是讲复杂的东西讲的浅显易懂。反射的定义对象可以通过反射获取对应的类，类可以通过反射获取所有方法，拿到的方法可以调用，这种机制就是反射。反射机制在安全方面的意义例如我们要完成RCE，但代码中绝大多数时候并没有Runtime，ProcessBuilder等常见的用于命令执行的类来让我们调用。",
            "PostURL": "https://www.ek1ng.com/java-reflect-learning.html",
            "AuthorURL": "https://ek1ng.com/"
        },
        {
            "Title": "go语言三个小项目 ｜ 青训营笔记",
            "Author": "xyxsw",
            "Date": "2023-07-25",
            "Content": "猜数字猜数字这个项目非常简单，它涉及到随机数的生成和用户输入操作。我们使用了bufio库来处理输入数据。reader := bufio.NewReader(os.Stdin)input, _ := reader.ReadString('\\n')简单字典标准库strconv它主要用于字符和其他类型之间的转换。strconv.Atoi(s string) int 标准库stringsstrings.T",
            "PostURL": "https://xyxsw.ltd/2023/07/25/go%E8%AF%AD%E8%A8%80%E4%B8%89%E4%B8%AA%E5%B0%8F%E9%A1%B9%E7%9B%AE%20%EF%BD%9C%20%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AC%94%E8%AE%B0/",
            "AuthorURL": "https://xyxsw.ltd/"
        },
        {
            "Title": "『LeetCode-HOT-100』T1～T10",
            "Author": "NX",
            "Date": "2023-07-24",
            "Content": "两数之和暴力枚举暴力枚举 i 和 j ，没什么好说的12345678910func twoSum(nums []int, target int) []int {    for i, _ := range nums {        for j := i + 1; j \u003c len(nums); j++ {            if nums[i]+nums[j] == target {",
            "PostURL": "https://nickxu.me/post/leetcode-hot-100-t1-t10.html",
            "AuthorURL": "https://nickxu.me/"
        },
        {
            "Title": "Golang 性能调优速查笔记",
            "Author": "Atom",
            "Date": "2023-07-24",
            "Content": "# 技巧 unsafe转换字符串/字节切片的技巧 字符串 -\u003e 字节切片：*(*[]byte)(unsafe.Pointer(\u0026s)) 缓冲区不能修改，否则 go 会panic！ 字节切片 -\u003e 字符串：*(*string)(unsafe.Pointer(\u0026buf)) 重用缓冲区 复位缓冲器 bytes.Buffer.Reset buf = buf[:0] 尽可能直接分配所需大小的数组 清空Map",
            "PostURL": "https://homeboyc.cn/blog/golang-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0/",
            "AuthorURL": "https://www.homeboyc.cn/"
        },
        {
            "Title": "把“用VSCode打开”按钮加入MacOS右键菜单",
            "Author": "Atom",
            "Date": "2023-07-24",
            "Content": "打开自动操作新建文稿选择快速操作设置“工作流程收到当前”为文件或文件夹在左上方搜索栏搜索“运行” -》 找到“运行 Shell 脚本” 并将其拖入右侧 -》 将下方脚本填入文本框for f in \"$@\"; do open -a 'Visual Studio Code' \"$f\" done Copy 设置“传递输入”为作为自变量保存为Open in Visual Studio Code",
            "PostURL": "https://homeboyc.cn/blog/%E6%8A%8A%E7%94%A8vscode%E6%89%93%E5%BC%80%E6%8C%89%E9%92%AE%E5%8A%A0%E5%85%A5macos%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/",
            "AuthorURL": "https://www.homeboyc.cn/"
        },
        {
            "Title": "java-sec-code 代码审计靶场题解",
            "Author": "ek1ng",
            "Date": "2023-07-20",
            "Content": "这个靶场包含了各类基本漏洞在java语言上的场景以及java安全特有的JNDI注入，反序列化，表达式注入等等，并且给出了相关的利用手段和修复方案。java-sec-code搭建环境可以用Docker搭建，不过想了想不太熟练java的包管理和web server部署这一套，并且本地起相比于容器也方便调试，于是决定本地起一份。由于我是archlinux，包管理安装的都是最新的jdk版本，靶场的jdk版",
            "PostURL": "https://www.ek1ng.com/java-sec-code.html",
            "AuthorURL": "https://ek1ng.com/"
        },
        {
            "Title": "分布式系统测试工具 muxy 初探",
            "Author": "Atom",
            "Date": "2023-07-17",
            "Content": "# 前言 本篇文章主要简单介绍分布式系统测试工具 muxy 工具，在介绍前，我想先谈谈分布式系统测试。# Coding is easier than testing 编程比测试简单。我认为一个程序你把它写出来不是最难的，把它测好才是最难的。真的这么夸张吗？ 我想从一个简单的 HelloWorld 程序来谈谈一个系统的稳定运行所需要的条件。# 一个普通的 HelloWorld 我们需要考虑来自以",
            "PostURL": "https://homeboyc.cn/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-muxy-%E5%88%9D%E6%8E%A2/",
            "AuthorURL": "https://www.homeboyc.cn/"
        },
        {
            "Title": "CrewCTF 2023 Web Writeup",
            "Author": "ek1ng",
            "Date": "2023-07-14",
            "Content": "环境还在，赛后看看题，一共四道Web，都挺有意思的。sequence_galleryDo you like sequences?http://sequence-gallery.chal.crewc.tf:8080/ 123456789101112131415sequence = request.args.get('sequence', None)if sequence is None:    re",
            "PostURL": "https://www.ek1ng.com/2023CrewCTFWP.html",
            "AuthorURL": "https://ek1ng.com/"
        }
    ]
}